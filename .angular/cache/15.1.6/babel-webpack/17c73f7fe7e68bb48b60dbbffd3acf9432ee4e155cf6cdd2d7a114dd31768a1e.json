{"ast":null,"code":"export class CustomValidators {\n  constructor() {\n    // If validator has no parameters\n    this.passwordMatch = frmGroup => {\n      let passControl = frmGroup.get('password');\n      let confirmPassControl = frmGroup.get('confirmPassword');\n      if (!passControl || !confirmPassControl || !passControl.value || !confirmPassControl.value) return null;\n      let valErr = {\n        'UnmatchedPassword': {\n          'pass': passControl?.value,\n          'confrim': confirmPassControl?.value\n        }\n      };\n      return passControl?.value == confirmPassControl?.value ? null : valErr;\n    };\n  }\n  passwordMatchAdv(complexPassword = false) {\n    //If complextPassword?, check fullname not included in password\n    return control => {\n      let passControl = control.get('password');\n      let confirmPassControl = control.get('confirmPassword');\n      if (!passControl || !confirmPassControl || !passControl.value || !confirmPassControl.value) return null;\n      let valErr = {\n        'UnmatchedPassword': {\n          'pass': passControl?.value,\n          'confrim': confirmPassControl?.value\n        }\n      };\n      return passControl?.value == confirmPassControl?.value ? null : valErr;\n    };\n  }\n}","map":{"version":3,"mappings":"AAIA,OAAM,MAAOA,gBAAgB;EAA7BC;IACA;IACC,kBAAa,GACXC,QAAyB,IAA6B;MACrD,IAAIC,WAAW,GAAED,QAAQ,CAACE,GAAG,CAAC,UAAU,CAAC;MACzC,IAAIC,kBAAkB,GAAEH,QAAQ,CAACE,GAAG,CAAC,iBAAiB,CAAC;MACvD,IAAG,CAACD,WAAW,IAAI,CAACE,kBAAkB,IAAI,CAACF,WAAW,CAACG,KAAK,IAAI,CAACD,kBAAkB,CAACC,KAAK,EACvF,OAAO,IAAI;MAEb,IAAIC,MAAM,GAAC;QAAC,mBAAmB,EAAE;UAAC,MAAM,EAAEJ,WAAW,EAAEG,KAAK;UAAE,SAAS,EAAED,kBAAkB,EAAEC;QAAK;MAAC,CAAC;MACpG,OAAQH,WAAW,EAAEG,KAAK,IAAED,kBAAkB,EAAEC,KAAK,GAAG,IAAI,GAAGC,MAAM;IACvE,CAAC;EAgBD;EAdAC,gBAAgB,CAACC,kBAAyB,KAAK;IAE7C;IACA,OAAQC,OAAwB,IAA6B;MAC3D,IAAIP,WAAW,GAAEO,OAAO,CAACN,GAAG,CAAC,UAAU,CAAC;MACxC,IAAIC,kBAAkB,GAAEK,OAAO,CAACN,GAAG,CAAC,iBAAiB,CAAC;MACtD,IAAG,CAACD,WAAW,IAAI,CAACE,kBAAkB,IAAI,CAACF,WAAW,CAACG,KAAK,IAAI,CAACD,kBAAkB,CAACC,KAAK,EACvF,OAAO,IAAI;MAEb,IAAIC,MAAM,GAAC;QAAC,mBAAmB,EAAE;UAAC,MAAM,EAAEJ,WAAW,EAAEG,KAAK;UAAE,SAAS,EAAED,kBAAkB,EAAEC;QAAK;MAAC,CAAC;MACpG,OAAQH,WAAW,EAAEG,KAAK,IAAED,kBAAkB,EAAEC,KAAK,GAAG,IAAI,GAAGC,MAAM;IACvE,CAAC;EACH","names":["CustomValidators","constructor","frmGroup","passControl","get","confirmPassControl","value","valErr","passwordMatchAdv","complexPassword","control"],"sourceRoot":"","sources":["/home/tasneem/Desktop/test laravel/angular/Final-Project-FrontEnd/src/app/auth/custom-validators.ts"],"sourcesContent":["\n import {  FormGroup ,AbstractControl, ValidationErrors, ValidatorFn} from '@angular/forms';\n\n\nexport class CustomValidators {\n// If validator has no parameters\n passwordMatch: ValidatorFn =\n  (frmGroup: AbstractControl): ValidationErrors | null => {\n    let passControl= frmGroup.get('password');\n    let confirmPassControl= frmGroup.get('confirmPassword');\n    if(!passControl || !confirmPassControl || !passControl.value || !confirmPassControl.value)\n      return null;\n\n    let valErr={'UnmatchedPassword': {'pass': passControl?.value, 'confrim': confirmPassControl?.value}}\n    return (passControl?.value==confirmPassControl?.value)? null : valErr;\n  }\n\n  passwordMatchAdv(complexPassword: boolean=false): ValidatorFn\n  {\n    //If complextPassword?, check fullname not included in password\n    return (control: AbstractControl) : ValidationErrors | null=>{\n      let passControl= control.get('password');\n      let confirmPassControl= control.get('confirmPassword');\n      if(!passControl || !confirmPassControl || !passControl.value || !confirmPassControl.value)\n        return null;\n\n      let valErr={'UnmatchedPassword': {'pass': passControl?.value, 'confrim': confirmPassControl?.value}}\n      return (passControl?.value==confirmPassControl?.value)? null : valErr;\n    }\n  }\n\n  }\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}